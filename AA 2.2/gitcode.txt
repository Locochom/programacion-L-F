## üìå Conceptos de Programaci√≥n Funcional en Python  

### **1Ô∏è‚É£ Devoluciones de llamada (Callbacks)**  
- Son funciones que se **pasan como argumento** a otra funci√≥n para ser ejecutadas m√°s tarde.  
- Se utilizan com√∫nmente en programaci√≥n funcional y en eventos as√≠ncronos.  

üîπ Ejemplo en Python:  
```python
def operar(n1, n2, funcion):
    return funcion(n1, n2)

def suma(a, b): # Funci√≥n de primer orden
    return a + b

def resta(a, b):
    return a - b

resultado = operar(5, 3, suma)  # Pasamos la funci√≥n suma como argumento
print(resultado)

'''
Un callback es una funci√≥n que se pasa a otra funci√≥n como argumento y se espera que sea llamada dentro de esa funci√≥n

'''

```
### **2Ô∏è‚É£ Funciones de primera clase** 

En **Python**, las funciones son objetos de **primera clase**, lo que significa que se pueden:  
‚úÖ Asignase a variables 
‚úÖ Pasarse como argumentos a otras funciones  
‚úÖ Devolver desde una funci√≥n  

üîπ Ejemplo en Python:
```python
def saludo():
    return "¬°Hola!"

mi_variable = saludo  # Asignamos la funci√≥n a una variable
print(mi_variable())  # Llamamos a la funci√≥n a trav√©s de la variable
```

### **3Ô∏è‚É£ Funciones de orden superior**

Las **funciones de orden superior** en **Python** son aquellas que:  
‚úÖ Reciben una funci√≥n como argumento o  
‚úÖ Devuelven una funci√≥n como resultado  

üîπ Ejemplo en Python: 
```python
def elegir_operacion(operacion): # Funci√≥n de orden superior
    def multiplicar(x):
        return x * 2
    def dividir(x):
        return x / 2
    
    if operacion == "multiplicar":
        return multiplicar  # Retornamos la funci√≥n sin ejecutarla
    else:
        return dividir

doble = elegir_operacion("multiplicar")  # Devuelve la funci√≥n multiplicar
print(doble(10))
divide2 = elegir_operacion("dividir")  # Devuelve la funci√≥n dividir
print(divide2(10))
```

#üî∏ elegir_operacion es una funci√≥n de orden superior porque devuelve una funci√≥n en lugar de un valor normal.


### **4Ô∏è‚É£ Funciones lambda** 

Las **funciones lambda** en **Python** son funciones **an√≥nimas y peque√±as** que:  
‚úÖ Pueden pasarse como argumentos sin necesidad de definirlas antes 
‚úÖ Se utilizan cuando la funci√≥n es simple y solo se necesita en un lugar 

üîπ Ejemplo en Python: 
```python
doble = lambda x: x * 2
print(doble(5))  # Salida: 10


numeros = [1, 2, 3, 4]
dobles = list(map(lambda x: x * 2, numeros)) 
print(dobles)  # Salida: [2, 4, 6, 8]
```

**map**( ) es una funci√≥n de orden superior que aplica una funci√≥n a cada elemento de una lista.
**list**( ) convierte el resultado en una lista.
**lambda** x: x * 2 es la funci√≥n que se aplica a cada elemento de la lista.